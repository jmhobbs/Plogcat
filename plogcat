#!/usr/bin/env python

import subprocess
import re
import json
from optparse import OptionParser

VERSION="0.2.0"

# TODO: Curses - http://www.tuxradar.com/content/code-project-build-ncurses-ui-python

class term:
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'

	@classmethod
	def disable ( klass ):
		klass.HEADER = ''
		klass.OKBLUE = ''
		klass.OKGREEN = ''
		klass.WARNING = ''
		klass.FAIL = ''
		klass.ENDC = ''

class plogcat:

	def __init__ ( self ):
		self.levels = {
			"V": term.OKBLUE,
			"D": term.OKBLUE,
			"I": term.OKGREEN,
			"W": term.WARNING,
			"E": term.FAIL
		}

		self.bufsize = 1024
		self.bans = []
		self.highlights = []

	def loadBanFile ( self, ban_file, verbose = True ):
		with open( ban_file, 'r' ) as bans:
			for regex in bans:
				if "#" != regex[0]:
					self.addBan( regex, verbose )

	def addBan ( self, regex, verbose = False ):
		self.bans.append( re.compile( regex[:-1] ) )
		if verbose:
			print term.WARNING + regex[:-1] + term.ENDC

	def loadHighlightFile ( self, highlight_file, verbose = True ):
		with open( highlight_file, 'r' ) as highlights:
			for regex in highlights:
				if "#" != regex[0]:
					self.addHighlight( regex, verbose )

	def addHighlight ( self, regex, verbose = False ):
		self.highlights.append( re.compile( regex[:-1] ) )
		if verbose:
			print term.WARNING + regex[:-1] + term.ENDC

	def isBanned ( self, line ):
		for ban in self.bans:
			if ban.search( line ):
				return True
		return False

	def isHighlighted ( self, line ):
		for highlight in self.highlights:
			if highlight.search( line ):
				return True
		return False

	def run ( self ):
		pipe = subprocess.Popen("adb logcat -v brief", shell=True, stdout=subprocess.PIPE).stdout

		try:

			while True:
				line = pipe.readline()
				if not line:
					print "NO LINE!"
					break
				if self.isHighlighted( line ):
					print term.HEADER + line + term.ENDC,
				elif not self.isBanned( line ):
					level = term.OKBLUE
					try:
						level = self.levels[line[0]]
					except:
						pass
					print level + line + term.ENDC,
		finally:
			pipe.close()
			print "Pipe Closed"

def safeget ( hash, key, default = False ):
	try:
		return hash[key]
	except KeyError:
		return default

def main ():

	parser = OptionParser()
	parser.add_option( "-c", "--config", dest="config_file", help="json config options", metavar="CONFIG", default=None )
	parser.add_option( "-b", "--banfile", dest="ban_file", help="file of ban regexes", metavar="BANFILE", default=None )
	parser.add_option( "-s", "--highlightfile", dest="highlight_file", help="file of highlight regexes", metavar="HIGHLIGHTFILE", default=None )
	parser.add_option( "-p", "--plain", action="store_false", dest="color", default=True, help="no color")
	(options, args) = parser.parse_args()

	config = {}
	if options.config_file:
		with open(options.config_file, 'r') as config_file:
			config = json.load( config_file )

	if not options.color or safeget( config, "color", True ) == False:
		term.disable()

	pc = plogcat()
	if options.ban_file or safeget( config, "banfile", "" ) != "":
		print
		print term.HEADER + "Loading Bans..." + term.ENDC
		print
		if options.ban_file:
			pc.loadBanFile( options.ban_file )
		if safeget( config, "banfile", "" ) != "":
			pc.loadBanFile( config["banfile"] )

	if options.highlight_file or safeget( config, "highlightfile", "" ) != "":
		print
		print term.HEADER + "Loading Highlights..." + term.ENDC
		print
		if options.highlight_file:
			pc.loadHighlightFile('highlightfile.txt')
		if safeget( config, "highlightfile", "" ) != "":
			pc.loadHighlightFile(config["highlightfile"])

	print
	print
	print term.OKGREEN + "= Any Key To Continue = " + term.ENDC
	
	raw_input()
	print

	while True:
		try:
			pc.run()
		except KeyboardInterrupt:
			print
			print "Done!"
			exit(1)
		except:
			continue


if __name__ == "__main__":
	main()


